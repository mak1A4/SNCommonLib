<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.AwesomeTableUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>by Anders Figenschow (@ Sopra Steria)&#13;
anders.figenschow@soprasteria.com&#13;
&#13;
DISCLAIMER: Use the code with caution - and be beware that it is a huge risk to script against tables, fields, forms, views and so on.&#13;
I do not take responsibility for the results of the use of the functions in this script include.&#13;
Use ServiceNow out-of-the-box functionality, never use this.  Certain ServiceNow security measures are in the ServiceNow tool itself and can be bypassed with script - for example, a global table created *without* the "u_" prefix can be made with this script, but that table is from that point on considered a system table and can not be deleted.&#13;
Table utilities is nothing to play around with.  Know what you're doing!&#13;
&#13;
FAQ:&#13;
* Why is this a global, and not a scoped, script include?&#13;
  - Creating a table with script needs to use a legacy function which uses a java hashmap object.  Scoping the function will make the script fail.&#13;
     All but the createTable function will actually for the most case also work in a scope.&#13;
* Why did you make this?&#13;
   - Because I could.  I wanted to see if it was possible.  Also, we made our own "Configure form" widget which used this script include.  Good times!&#13;
* Your script ruined everything, what should I do!&#13;
    - The script can ruin everything if you don't know what you're doing.  I would say you should only use this script if you could in reality make it yourself. &#13;
* Who should use this script include?&#13;
    - Nobody should ever use it.  It is dangerous.&#13;
* Will changes made by this script be included in my update set?&#13;
    - Yes, we have tested this script and customizations made were included in the update set.  Try it out!  It also worked towards our custom scope, and changes were being published to Store.  Awesome.  I won't guarantee anything, though.  See: Who should use this script include, above&#13;
* How can I get in touch with you?&#13;
    - Come at me, bro:  https://www.linkedin.com/in/figenschow/  || anders.figenschow@soprasteria.com  || anders @ SNDevs slack&#13;
* Can you mention one STUPID thing in this code?&#13;
    - Everything about this code is stupid.  If I was to point out ONE thing, it would be that when creating a table, you are required to set up at least one field.  I solved this by creating a dummy field on creation, and immediately deleting it again.  Then you can add more fields with specific functions in here.&#13;
* What's this about creating global objects without the u_ prefix?&#13;
    - Only the ServiceNow tools prohibits this, you can do that in the script.  Or, you CAN, but never do it.  In the createFields function I have added a force prefix.  &#13;
* Do you have a tutorial?&#13;
    - You should read the code, all functions are commented.  Some functions are dependent on others, but it SHOULD make sense if you read through them.  Here's a quick start:&#13;
// Creates table 'My New Table', extends 'task', also create an empty form (boolean parameter)&#13;
new AwesomeTableUtils().createTable('u_mytable', 'My New Table', 'task', 'global', true);  // global scope table&#13;
</description>
        <name>AwesomeTableUtils</name>
        <script><![CDATA[var AwesomeTableUtils = Class.create();
AwesomeTableUtils.prototype = {

    initialize: function() {
        this.split = '.split';
        this.endSplit = '.end_split';
        this.beginSplit = '.begin_split';
    },

    /* get app sys_id from name */
    /* Example: new AwesomeTableUtils().getAppSysID('x_app_scope'); */
    getAppSysID: function(scope) {
        var gr = new GlideRecord('sys_app');
        gr.addQuery('scope', scope);
        gr.query();
        if (gr.next())
            return gr.sys_id;
        return null;
    },

    /* get scope sys_id from name */
    getScopeSysID: function(scope) {
        var gr = new GlideRecord('sys_scope');
        gr.addQuery('scope', scope);
        gr.query();
        if (gr.next())
            return gr.sys_id;
        return null;
    },

    setScopeOnTable: function(table, sys_id, scope) {

    },

    /*
     * Sets an application scope for a table - is being used in .create() but can be used seperately
     * @example
     * // Sets scope "Test" for table "MyTable"
     * new AwesomeTableUtils().setScope('MyTable', 'Test');
     * @param {String} Name of table
     * @param {String} Name of application scope
     */
    setScope: function(name, app) {
        //var app_package = new AwesomeTableUtils().getAppSysID(app);
        app = new AwesomeTableUtils().getScopeSysID(app);
        var gr = new GlideRecord('sys_db_object');
        gr.addQuery('name', name);
        gr.query();
        if (gr.next()) {
            gr.sys_scope = app;
            gr.sys_package = app;
            gr.update();
        }
    },
    /**
     * Checks if a table exists in the database
     * @input {String} table name
     * @returns {Boolean} true or false
     */
    tableExists: function(tableName) {
        var gr = new GlideRecord('sys_db_object');
        gr.addQuery('name', tableName);
        gr.query();
        if (gr.next())
            return true;
        return false;
    },

    /**
     * Returns information about a formatter based on name and table
     * @example
     * // Finds the "Activities (filtered)" formatter on the "task" table 
     * var ob = new AwesomeTableUtils().getFormatterByName('Activities (filtered)', 'task');
     * @returns {Object} Object containing name, table, sys_id, formatter and type
     */
    getFormatterByName: function(name, table) {
        var gr = new GlideRecord('sys_ui_formatter');
        gr.addQuery('name', name);
        gr.addQuery('table', table);
        gr.query();
        var ob = {};
        if (gr.next()) {
            ob.name = name;
            ob.table = table;
            ob.sys_id = gr.sys_id.toString();
            ob.formatter = gr.formatter.toString();
            ob.type = gr.type.toString();
            return ob;
        }
        return null;
    },

    /**
     * Deletes a specific field from a table
     * @example
     * // deletes 'u_test_field' from 'u_mytable'
     * new AwesomeTableUtils().deleteField('u_mytable', 'u_test_field');
     * @returns {String} Returns the sys_id of deleted record
     */
    deleteField: function(tableName, fieldName) {
        var gr = new GlideRecord('sys_dictionary');
        gr.addQuery('name', tableName);
        gr.addQuery('element', fieldName);
        gr.setWorkflow(false);
        gr.query();
        if (gr.next()) {
            return gr.deleteRecord();
        }
        return null;
    },
    /**
     * Updates all reference qualifiers in a table, against the ReportAnswers table
     * @param {String} table name
	 * @param {String} scope sys_id (or 'global')
	 * @example
     * // Update all reference quals for a table
     * new AwesomeTableUtils().updateAllReferenceQualifiers('x_app_scope_table_name', 'c0e2d23f4f323300d69400fe9310c77a');
     * @returns {Boolean} Returns true if successful
     */
    updateAllReferenceQualifiers: function(table, scopeSysID) {
        var fields = new AwesomeTableUtils().getAllTableFields(table);

        for (var i = 0; i < fields.length; i++) {
            var field = fields[i].name;
            var type = fields[i].type;
            if (type != 'GUID') {
                var params = '[{"reference_qual":"field' + 'IN' + field + '^EQ"}]';
                var sys_id = new AwesomeTableUtils().setFieldParameters(table, field, params, scopeSysID);
            }
        }
        return true;
    },

    /**
     * Returns all fields in a table
     * @example
     * // returns all fields except table dictionaries
     * new AwesomeTableUtils().getAllTableFields('u_mytable', false);
     * // returns all fields including table dictionaries
     * new AwesomeTableUtils().getAllTableFields('u_mytable', true);
     * @returns {Array} Returns the array of field names
     */
    getAllTableFields: function(tableName, includeDictionaries) {
        var arr_fields = [];
        var fields = new GlideRecord('sys_dictionary');
        var qr = fields.addQuery('name', tableName);
        qr.addOrCondition('name', 'task');
        if (includeDictionaries)
            fields.addEncodedQuery('internal_type!=collection^ORinternal_type=NULL'); //To ignore all the table dictionaries (optional)
        fields.query();

        while (fields.next()) {
            if (fields.element.toString() != '') {
                var isChoice = new AwesomeTableUtils().isChoiceField(tableName, fields.element.toString());
                var ob = {};
                ob.name = fields.element.toString();
                ob.type = fields.internal_type.toString();
                if (isChoice) ob.type = 'choice';
                ob.reference = fields.reference.toString();
                ob.label = fields.column_label.toString();
                arr_fields.push(ob);

            }
        }
        return arr_fields;
    },
    /**
     * Function to create a reference qualifier filter (comma seperated string) based on an encoded query
     * @example
     * new AwesomeTableUtils().fieldRefQual('incident', 'active=false', 'assigned_to');
     */
    fieldRefQual: function(table, filter, myfield) {
        var gr = new GlideRecord(table);
        gr.addEncodedQuery(filter);
        gr.query();
        var s = '';
        var count = 0;
        while (gr.next()) {
            if (count > 0)
                s += ',';
            s += '' + gr[myfield];
            count++;
        }
        return s;
    },
    /**
     * Returns all values of all fields in a table
     * @example
     * // returns all field values in table 'incident'
     * new AwesomeTableUtils().getAllFieldValues('incident');
     * @returns {Array} Returns the array of field values in chosen table
     */
    getAllFieldValues: function(table) {
        var fields = new AwesomeTableUtils().getAllTableFields(table, false);
        var arr = [];

        var gr = new GlideRecord(table);
        gr.query();
        while (gr.next()) {
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i].name.toString();
                arr.push(gr[field]);
            }
        }
        return arr;
    },

    /**
     * Returns all values of all fields in a table
     * @example
     * // returns all field values in table 'incident'
     * new AwesomeTableUtils().getAllFieldValues('incident', null);
     * @returns {Array} Returns the array of field values in chosen table
     */
    /* //example:
    var json = new AwesomeTableUtils().getAllFieldValuesJSON('incident');
    var arr = JSON.parse(json);
    for (var i = 0; i < arr.length; i++) {
      var fields = arr[i];
      gs.info('-');
      for (var u = 0; u < fields.length; u++) {
    	gs.info(fields[u].field + ' : ' + fields[u].value + '  ' + fields[u].type);

      }
    }
    */
    getAllFieldValuesJSON: function(table, rec) {
        var fields = new AwesomeTableUtils().getAllTableFields(table, false);
        var json = [];

        var gr = new GlideRecord(table);
        if (rec != null && rec != '')
            gr.addQuery('sys_id', rec);
        gr.query();
        while (gr.next()) {
            var arr = [];
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                var ob = {};
                ob.record = gr.sys_id.toString();
                ob.field = field.name.toString();
                ob.value = gr[field.name].toString();
                ob.type = field.type.toString();
                ob.reference = field.reference.toString();
                arr.push(ob);
            }
            json.push(arr);
        }
        return json;
    },

    /**
     * Creates fields on a table
     * @example
     * // Creates two fields 'Field 1' and 'Field 2' on table 'u_mytable'
     * var fields = [{"element":"test_field","column_label":"Field 1","internal_type":"string","max_length":"0","reference":"","default_value":"Good Talk"},{"element":"cool_field","column_label":"Field 2","internal_type":"string","max_length":"100","reference":"","default_value":"default here"}];
     * new AwesomeTableUtils().createFields('u_mytable', fields, 'global');
     * @param {String} tableName
     * @param {Array[JSON]} fields
	 * @param {String} scope sysID (you can use getScopeSysID function, or just 'global')
     * @returns {Boolean} true if successful
     */
    createFields: function(tableName, fields, scopeSysID) {
        // fields params : name, label, type, maxSize, refTable, defaultValue

        // iterate through the array to get every json object in it
        for (var i = 0; i < fields.length; i++) {

            // skip if field already exists
            var checkGR = new GlideRecord('sys_dictionary');
            checkGR.addQuery('name', tableName);
            checkGR.addQuery('element', 'u_' + fields[i].element);
            checkGR.query();
            if (checkGR.next()) {
                // log the error and skip one loop iteration
                gs.error('[AwesomeTableUtils.createFields] Error creating field ' + fields[i].element + ', it already exists in table ' + tableName);
                continue;
            }

            // create a field
            var gr = new GlideRecord('sys_dictionary');
            gr.initialize();
            gr.setValue('name', tableName); // name = table_name
            gr.setValue('sys_scope', scopeSysID);
            gr.setValue('sys_package', scopeSysID);
            // get key and value for this specific json object. Each key/value represents one property for each field
            for (var key in fields[i]) {
                var val = fields[i][key];
                gr.setValue(key, val);
            }
            gr.insert();
        }
        return true;
    },

    /**
     * Deletes all records in a table
     * @example
     * // Deletes all records in table 'u_mytable'
     * new AwesomeTableUtils().deleteAllRecords('u_mytable');
     * @param {String} tableName
     */
    deleteAllRecords: function(tableName) {
        var ga = new GlideAjax('RecordUtils');
        ga.addParam("sysparm_type", "deleteRecords");
        ga.addParam('sysparm_name', tableName);
        ga.getXMLAnswer(function(answer) {});
    },

    /**
     * Drops a table completely
     * @example
     * // Deletes the entire table 'u_mytable' from the database
     * new AwesomeTableUtils().deleteTable('u_mytable');
     * @param {String} tableName
     */
    deleteTable: function(tableName) {
        gs.dropTable(tableName);
    },

    /**
     * Sets field parameters
     * @example
     * // Sets "mandatory" and "read_only" to true, and changes default_value to "A different default"
     * var params = '[{"mandatory":"true","read_only":"true","default_value":"A different default"}]';
     * new AwesomeTableUtils().setFieldParameters('u_mytable', 'u_my_field', params, 'global');
     * @param {String} tableName
     * @param {String} fieldName
	 * @param {String} scope sys_id (or 'global')
     * @param {Array[JSON]} params
     */
    setFieldParameters: function(tableName, fieldName, params, scopeSysID) {
        //params = JSON.parse(params);
        for (var i = 0; i < params.length; i++) {
            var gr = new GlideRecord('sys_dictionary');
            gr.addQuery('name', tableName);
            gr.addQuery('element', fieldName);
            gr.query();
            if (gr.next()) {
                // get key and value for this specific json object. Each key/value represents one property for each field
                for (var key in params[0]) {
                    var val = params[0][key];
                    if (val == 'true')
                        val = true;
                    if (val == 'false')
                        val = false;
                    gr.setValue(key, val);
                }
                gr.setValue('sys_scope', scopeSysID);
                gr.setValue('sys_package', scopeSysID);

                return gr.update();
            }
        }
    },

    /**
     * Creates a table
     * @example
     * // Creates table 'My New Table', extends 'task', also create an empty form (boolean parameter)
     * new AwesomeTableUtils().createTable('u_mytable', 'My New Table', 'task', 'My App Scope', true);
     * @param {String} table_name
     * @param {String} table_label
     * @param {String} extends_table
     * @param {String} Scope name
     * @param {Boolean} Create form true/false
     */
    createTable: function(table_name, table_label, extends_table, scope, addForm) {
        // if not global scope, let's make sure the requested scope actually exists
        if (scope == '' || scope == null)
            throw new Error('no scope defined.  please use a proper scope or use "global".');

        if (table_name == '' || table_name == null)
            throw new Error('no table name defined');

        if (table_label == '' || table_label == null)
            throw new Error('no table label defined');

        var gr = new GlideRecord('sys_app');
        gr.addQuery('scope', scope);
        gr.query();
        if (!gr.next())
            throw new Error('The scope is not found on this instance');

        // To make sure the table name has the u_ prefix.
        // If we don't include it, ServiceNow will see the table as a system table which can't be deleted EVER.
        var prefix = table_name.substring(0, 2); // check two first string chars
        if (scope == 'global' && prefix != 'u_') {
            table_name = 'u_' + table_name;
            gs.info('added prefix u_');
        } else if (scope != 'global' && prefix != 'x_') {
            table_name = scope + '_' + table_name;
            gs.info('added prefix ' + scope + '_');
        } else {
            gs.info('prefix exists.');
        }

        var str = 'u_placeholderelement_1';  // this is stupid.
        var attrs = new Packages.java.util.HashMap();  // reason why we do stupid things. ^
        var ca = new GlideColumnAttributes(str);
        ca.setType('string');
        ca.setUsePrefix(scope == 'global');
        attrs.put(str, ca);
        // Create the table and add the column attributes
        var tc = new GlideTableCreator(table_name, table_label);
        tc.setColumnAttributes(attrs);
        if (typeof extends_table != 'undefined')
            tc.setExtends(extends_table);
        var newTable = tc.update();
        new AwesomeTableUtils().setScope(table_name, scope);
        new AwesomeTableUtils().deleteField(table_name, str);

        // if prompted, add a form to this table
        // The function will first check if a form exists, if it does it will not create a duplicate
        // If not, the function creates a form with same name as table
        if (addForm)
            new AwesomeTableUtils().addForm(table_name, 'Default view', new AwesomeTableUtils().getScopeSysID(scope));
    },

    /* 
     * Saves a form layout
     * @example
     * var elements = [{'element':'category','position':0,'type':''},{'element':'state','position':1,'type':''}]
     * new AwesomeTableUtils().saveForm('65e8dcdcdb276b0080c3789e3b96194d', elements, true);
     * @param {String} section
     * @param {Array[JSON]} elements
     * @param {Boolean} clear form first
     * 
     */
    saveForm: function(section, json, clearForm) {
        if (clearForm) {
            var success = new AwesomeTableUtils().removeAllElements(section);
            if (!success)
                throw new Error('Error while clearing elements from section.');
        }
        for (var i = 0; i < json.length; i++) {
            var ob = json[i];
            var element = ob.element;
            var position = ob.position;
            var type = ob.type;
            var formatter = ob.formatter;
            new AwesomeTableUtils().addElement(element, position, type, section, formatter);
        }
    },

    // **************************
    // FORM VIEW SCRIPTS 
    // **************************

    // Returns sys_id for a specific view within a specific scope
    // @example
    // new AwesomeTableUtils().getView('default', 'global');  // todo: find a good way to seperate on applications / scopes (it's in different tables)
    getView: function(name, scope) {
        var gr = new GlideRecord('sys_ui_view');
        gr.addQuery('name', name);
        //gr.addQuery('sys_scope', new AwesomeTableUtils().getScopeSysID(scope));
        gr.query();
        if (gr.next())
            return gr.sys_id;
        else {
            var gr2 = new GlideRecord('sys_ui_view');
            gr2.addQuery('name', '');
            gr2.query();
            if (gr2.next())
                return gr2.sys_id;
        }
        return null;
    },

    /**
     * Finds the sys_id of a sys_ui_form
     * @example
     * // Finds a sys_ui_form.sys_id
     * new AwesomeTableUtils().getUIForm('form_name');
     * @param {String} form name
     */
    getUIForm: function(name, view) {
        if (view == null)
            view = 'Default view';
        var gr = new GlideRecord('sys_ui_form');
        gr.addQuery('name', name);
        gr.addQuery('view', new AwesomeTableUtils().getView(view));
        gr.query();
        if (gr.next())
            return gr.sys_id;
        return null;
    },
    /**
     * Checks if a form exists within a view and scope
     * @example
     * // Checks if form u_test is in "default" view within application scope "65e8dcdcdb276b0080c3789e3b96194d"
     * var exists = new AwesomeTableUtils().formExists('u_test', 'default', '65e8dcdcdb276b0080c3789e3b96194d');
     * @param {String} form name
     * @param {String} view name
     * @param {String} Application name
     */
    getForm: function(form, view, sys_scope) {
        var gr = new GlideRecord('sys_ui_form');
        gr.addQuery('name', form);
        gr.addQuery('view', new AwesomeTableUtils().getView(view));
        gr.addQuery('scope', sys_scope);
        gr.query();
        if (gr.next())
            return gr.sys_id;
        return null;
    },
    /**
     * Gets all sections in a table
     * @example
     * // Return all sections in table "u_test"
     * new AwesomeTableUtils().getSections('u_test');
     * @param {String} table
     * Returns {Array[JSON]} of all sections
     */
    getSections: function(table) {
        var gr = new GlideRecord('sys_ui_form_section');
        gr.addQuery('sys_ui_form', table);
        gr.orderBy('position');
        gr.query();
        var arr = [];
        while (gr.next()) {
            var ob = {};
            ob.form = gr.sys_ui_form.getDisplayValue();
            ob.position = gr.position.toString();
            ob.name = gr.sys_ui_section.getDisplayValue();
            ob.sys_id = gr.sys_id.toString();
            ob.section = gr.sys_ui_section.toString();
            arr.push(ob);
        }
        return arr;
    },
    /**
     * Gets all forms in a table
     * @example
     * // Return all forms in table "u_test"
     * new AwesomeTableUtils().getForms('u_test');
     * @param {String} table
     * Returns {Array[JSON]} of all forms
     */
    getForms: function(table) {
        var gr = new GlideRecord('sys_ui_form');
        gr.addQuery('name', table);
        gr.query();
        var arr = [];
        while (gr.next()) {
            var ob = {};
            ob.table = gr.name.getDisplayValue();
            ob.view = gr.view.getDisplayValue();
            ob.sys_id = gr.sys_id.toString();
            arr.push(ob);
        }
        return arr;
    },
    /**
     * Get dictionary field type for an element
     * @example
     * new AwesomeTableUtils().getElementFieldType('short_description');
     * @param {String} table name
     * @param {String} element name
     * @param {Boolean} true if check for Choice field, false if internal_type
     * Returns {String} field type
     */
    getElementFieldType: function(table, element) {
        var gr = new GlideRecord('sys_dictionary');
        gr.addQuery('element', element);
        gr.query();
        if (gr.next()) {
            if (new AwesomeTableUtils().isChoiceField(table, element))
                return 'choice';
            else
                return gr.internal_type.toString();
        }
        return null;
    },

    /**
     * Get dictionary field type for an element
     * @example
     * new AwesomeTableUtils().getElementMaxLength('short_description');
     * @param {String} table name
     * @param {String} element name
     * @param {Boolean} true if check for Choice field, false if internal_type
     * Returns {String} max_length
     */
    getElementMaxLength: function(table, element) {
        var gr = new GlideRecord('sys_dictionary');
        gr.addQuery('element', element);
        gr.addQuery('name', table);
        gr.query();
        if (gr.next()) {
            return gr.max_length ? parseInt(gr.max_length + '') : 0;
        }
        return null;
    },

    /**
     * Check if a field on a GlideRecord is a choice field or not
     * @example
     * new AwesomeTableUtils().isChoiceField('incident', 'short_description'); // false
     * @param {String} table name
     * @param {String} field name
     * Returns {Boolean} true or false
     */
    isChoiceField: function(table, field) {
        var gr = new GlideRecord(table);
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            var element = gr.getElement(field);
            if (!element)
                return false;
            var ed = element.getED();
            return ed.isChoiceTable();
        }

    },

    /**
     * Gets all field elements in a specific section
     * @example
     * // gets all field elements in section "TestSection" 
     * new AwesomeTableUtils().getElementsInSection('[TestSection sys_id]');
     * @param {String} sys_id
     * Returns {Array[JSON]} of all elements in section
     */
    getElementsInSection: function(table, section) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', section);
        gr.query();
        var arr = [];
        while (gr.next()) {
            var ob = {};
            ob.element = gr.element.toString();
            ob.position = gr.position.toString();
            ob.type = gr.type.toString();
            ob.reference = gr.reference.toString();
            ob.field_type = new AwesomeTableUtils().getElementFieldType(table, gr.element.toString());
            ob.sys_id = gr.sys_id.toString();
            ob.documentation = new AwesomeTableUtils().getDocumentation(table, gr.element.toString(), 'en');
            ob.max_length = this.getElementMaxLength(table, gr.element.toString());
            arr.push(ob);
        }
        return arr;
    },

    /*
     * Gets an element label
     * @example
     * // Gets the label for the category field on the incident table, for english language
     * var label = new AwesomeTableUtils().getDocumentation('incident', 'category', 'en');
     * @param {String} Table name
     * @param {String} Element name
     * @param {String} Language code (for example "en")
     */
    getDocumentation: function(table, element, language) {
        if (language == null)
            language = 'en';
        var gr = new GlideRecord('sys_documentation');
        gr.addQuery('name', table);
        gr.addQuery('element', element);
        gr.addQuery('language', language);
        gr.query();
        if (gr.next()) {
            var ob = {};
            ob.label = gr.label.toString();
            ob.plural = gr.plural.toString();
            ob.language = gr.language.toString();
            ob.hint = gr.hint.toString();
            return ob;
        }
        return null;
    },
    /**
     * Gets all field elements in a specific table
     * @example
     * // gets all field elements in table "u_test" 
     * new AwesomeTableUtils().getElements('u_test');
     * @param {String} name
     * Returns {Array[JSON]} of all elements in table, with section details
     */
    getElements: function(table) {
        var form = new AwesomeTableUtils().getUIForm(table);
        var sections = new AwesomeTableUtils().getSections(form);
        //sections = JSON.parse(sections);
        var output = [];
        for (var i = 0; i < sections.length; i++) {
            var sec = sections[i];
            var ob = {};
            var sys_id = sections[i].section;
            ob.position = sec.position.toString();
            ob.sys_id = sec.section.toString();
            ob.name = sec.name.toString();
            ob.form = form.toString();
            ob.section = new AwesomeTableUtils().getElementsInSection(table, sys_id);
            output.push(ob);
        }
        return output;
    },
    /**
     * Sets params for elements
     * @example
     * // Set position data for two elements to 2 and 1
     * var json = '[{"element":"name1","position":"2"},{"element":"name2","position":"1"}]';
     * new AwesomeTableUtils().setElementParams(json);
     * @param {Array[JSON]} List of elements and properties to set
     * Returns {Boolean} true if successful, false if not
     */
    setElementParams: function(json) {
        //json = JSON.parse(json);
        for (var i = 0; i < json.length; i++) {
            var ob = json[i];
            var gr = new GlideRecord('sys_ui_element');
            gr.addQuery('element', ob.element);
            gr.query();
            if (gr.next()) {
                gs.info('found element: ' + ob.element);
                if (ob.position)
                    gr.position = ob.position;
                if (ob.type)
                    gr.type = ob.type;
                if (ob.sys_ui_section) // reference / sys_id
                    gr.sys_ui_section = ob.sys_ui_section;
                if (ob.sys_ui_formatter) // reference / sys_id
                    gr.sys_ui_formatter = ob.sys_ui_formatter;

                gr.update();
                new AwesomeTableUtils().refreshElementDictionary(gr.element.toString());
            }
        }
        return true;
    },
    /**
     * For all elements in a section, when you need to inject a field you need to increase all position values
     * @example
     * // In a section, add all position values from position 14 (to make room for a new element in pos 14)
     * new AwesomeTableUtils().incrementPositions('b96e26d5dbf3e740248062eb0b961975', 14);
     * @param {String} sys_id of Section
     * @param {Integer} Position from where to start incrementing
     * Returns {Boolean} true if successful
     */
    incrementPositions: function(section, from) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', section);
        gr.addQuery('position', '>=', from);
        gr.orderBy('position');
        gr.query();
        while (gr.next()) {
            var incPosition = gr.position + 1;
            gr.position = incPosition;
            gr.setWorkflow(false);
            gr.update();
            new AwesomeTableUtils().refreshElementDictionary(gr.element.toString());
        }
        return true;
    },
    /*
     * Helper function - a dictionary record needs to be updated (even if no changes have been made) for the element properties to be refreshed.  It is so dumb.
     */
    refreshElementDictionary: function(element) {
        var gr = new GlideRecord('sys_dictionary');
        gr.addQuery('element', element);
        gr.query();
        if (gr.next()) {
            gr.setForceUpdate(true);
            gr.update();
        }
    },

    /**
     * Adds a view 
     * @example
     * // Add view "default"
     * new AwesomeTableUtils().addView('default', 'default', '65e8dcdcdb276b0080c3789e3b96194d');
     * @param {String} view name
     * @param {String} Application
     * @return {String} sys_id of new View
     */
    addView: function(view, sys_scope) {
        var gr = new GlideRecord('sys_ui_view');
        gr.initialize();
        gr.setValue('name', view);
        gr.setValue('title', view);
        gr.setValue('sys_package', sys_scope);
        gr.setValue('sys_scope', sys_scope);
        var newRecord = gr.insert();

        gr.sys_scope = sys_scope;
        gr.sys_package = sys_scope;
        gr.update();
        return newRecord;
    },

    /**
     * Adds a form 
     * @example
     * // Add form u_test
     * new AwesomeTableUtils().addForm('u_test', 'default', '65e8dcdcdb276b0080c3789e3b96194d');
     * @param {String} form name
     * @param {String} view name
     * @param {String} Application
     */
    addForm: function(name, view, sys_scope) {
        // first check if view exists.
        var existingView = new AwesomeTableUtils().getView(view);
        if (existingView == null) {
            // it clearly doesnt, so lets create the view
            view = new AwesomeTableUtils().addView(view, sys_scope);
        }

        // then check if form exists.
        var existingForm = new AwesomeTableUtils().getForm(name, view, sys_scope);
        if (existingForm != null) {
            // this form exists, so we don't create a duplicate.  Return the sys_id.
            return existingForm;
        }
        // it doesn't exist.  let's create it.
        var gr = new GlideRecord('sys_ui_form');
        gr.initialize();
        gr.setValue('name', name);
        gr.setValue('view', view);
        gr.setValue('sys_scope', sys_scope);
        gr.setValue('sys_package', sys_scope);
        return gr.insert();
    },
    /**
     * Remove a Section from a Form
     * @example
     * // Remove section 65e8dcdcdb276b0080c3789e3b96194d from form 65e8dcdcdb276b0080c3789e3b96194d
     * new AwesomeTableUtils().removeSection('65e8dcdcdb276b0080c3789e3b96194d', '65e8dcdcdb276b0080c3789e3b96194d'); 
     * @param {String} name of Table
     * @param {String} sys_id of Section
     * @param {String} sys_id of Form
     */
    removeSection: function(table, form, section) {
        var gr = new GlideRecord('sys_ui_form_section');
        gr.addQuery('sys_ui_form');
        gr.addQuery('sys_ui_section');
        gr.query();
        if (gr.next())
            gr.deleteRecord();

        var g = new GlideRecord('sys_ui_section');
        g.addQuery('sys_id', section);
        g.query();
        if (g.next())
            g.deleteRecord();
    },

    /**
     * Add a Section to a Form
     * @example
     * // add section to table 'incident' and form 65e8dcdcdb276b0080c3789e3b96194d, position 7
     * new AwesomeTableUtils().addSection('My Caption', 'incident', '65e8dcdcdb276b0080c3789e3b96194d', 7, 'global'); 
     * @param {String} Caption of new Section
     * @param {String} name of Table
     * @param {String} sys_id of Form
     * @param {String} position index
	 * @param {String} Scope sys_id (or 'global')
     * @returns sys_id of new Section
     */
    addSection: function(name, table, form, position, scopeSysID) {
        var g = new GlideRecord('sys_ui_section');
        g.initialize();
        g.name = table;
        g.view = 'Default view';
        g.caption = name;
        g.setValue('sys_scope', scopeSysID);
        g.setValue('sys_package', scopeSysID);
        var newSection = g.insert();

        var gr = new GlideRecord('sys_ui_form_section');
        gr.initialize();
        gr.sys_ui_form = form;
        gr.sys_ui_section = newSection;
        gr.position = position;
        gr.insert();

        return newSection;
    },

    /**
     * Remove an Element from form section
     * @example
     * // Remove element u_test from section 65e8dcdcdb276b0080c3789e3b96194d
     * new AwesomeTableUtils().removeElement('u_test', '65e8dcdcdb276b0080c3789e3b96194d'); 
     * @param {String} element name
     * @param {String} sys_id of Section
     */
    removeElement: function(element, sys_ui_section) {
        if (sys_ui_section == null)
            throw new Error('Section is required - this record contains the table [name] and section [display_value]');
        if (element == null)
            throw new Error('Element name is required.');
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', sys_ui_section);
        gr.addQuery('element', element);
        gr.query();
        if (gr.next()) {
            gr.deleteRecord();
            new AwesomeTableUtils().refreshElementDictionary(element);
        }
    },

    /**
     * Adds a NON EXISTING form element (must be an existing sys_dictionary field)
     * @example
     * // Add element u_test to section X
     * new AwesomeTableUtils().addElement('u_test', 0, '', null, null); // sys_ui_section is sys_id of Section
     * @param {String} element name
     * @param {Integer} Position of element in form
     * @param {String} Type of element : '', '.begin_split', '.split', '.end_split', 'formatter', 'annotation'
     * @param {String} sys_id of Section where to add the Element.  No value == Main section
     * @param {String} sys_id of Formatter.  If no formatter, pass [null] value. ("Activities" is a Formatter, for example)
     */
    addElement: function(element, position, type, sys_ui_section, sys_ui_formatter) {
        if (sys_ui_section == null)
            throw new Error('Section is required - this record contains the table [name] and section [display_value]');
        if (element == null)
            throw new Error('Element name is required.');

        // increment all elements positions to make room for this new one
        new AwesomeTableUtils().incrementPositions(sys_ui_section, position);

        // dont insert element if it's already there
        if (type != this.split && type != this.beginSplit && type != this.endSplit) {
            var g = new GlideRecord('sys_ui_element');
            g.addQuery('element', element);
            g.addQuery('sys_ui_section', sys_ui_section);
            g.query();
            if (g.next()) {
                gs.error('addElement function ignored element ' + element + ' because it is already in section ' + sys_ui_section);
                return;
            }
        }

        var gr = new GlideRecord('sys_ui_element');
        gr.initialize();
        gr.setValue('element', element);
        gr.setValue('type', type);
        gr.setValue('position', position);
        gr.setValue('sys_ui_section', sys_ui_section);
        gr.setValue('sys_ui_formatter', sys_ui_formatter);
        gr.insert();
        new AwesomeTableUtils().refreshElementDictionary(element);
    },

    /**
     * Sets a hint on an element
     * @example
     * // Add hint "Write your name" to element "u_name" on table "x_mytable"
     * new AwesomeTableUtils().setElementHint('x_mytable', 'u_name', 'Write your name', 'global');
     * @param {String} table name
     * @param {String} element name
     * @param {String} hint in pure text
	 * @param {String} Scope sys_id (or 'global')
     */
    setElementHint: function(table, element, hint, scopeSysID) {
        var gr = new GlideRecord('sys_documentation');
        gr.addQuery('name', table);
        gr.addQuery('element', element);
        gr.query();
        var setScope = false;
        var record = null;
        if (gr.next()) {
            setScope = true;
            gr.setValue('hint', hint);
            record = gr.sys_id.toString();
        } else {
            gs.error('Setting hint : no element found in table!', 'AwesomeTableUtils');
        }

        // seems the system forces scope so we need to make a second pass.
        if (setScope) {
            var gr2 = new GlideRecord('sys_documentation');
            gr2.addQuery('sys_id', record);
            gr2.query();
            if (gr2.next()) {
                gr2.setValue('sys_scope', scopeSysID);
                gr2.setValue('sys_package', scopeSysID);
            }
        }
    },

    /*
     * Checks if element is in section or not
     * @example
     * var exists = new AwesomeTableUtils().elementExists('u_test', '65e8dcdcdb276b0080c3789e3b96194d');  // returns true if field is in the section
     * @example
     * var exists = new AwesomeTableUtils().elementExists('u_test', null);  // returns true if field is in ANY section
     * @param {String} name of element, for example u_fieldname
     * @param {String} sys_id of Section.  Use 'null' here to check if element is in any section at all.
     */
    elementExists: function(element, section) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('element', element);
        if (section)
            gr.addQuery('sys_ui_section', section); // sys_id
        gr.query();
        return gr.hasNext();
    },
    /*
     * Checks if the field exists in a table
     * @example
     * var exists = new AwesomeTableUtils().fieldExists('u_test', 'incident'); // returns true if the field exists in table 'incident'
     * @param {String} name of field, for example u_fieldname
     * @param {String} name of table, for example incident
     */
    fieldExists: function(fieldName, tableName) {
        var gr = new GlideRecord(tableName);
        return (gr.isValid() && gr.isValidField(fieldName));
    },
    /*
     * Sets split elements in a section
     * @example
     * new AwesomeTableUtils().insertSplit('788ed58bdb03230029344870399619a0', 0, 2, 4); 
     * @param {String} sys_id of Section
     * @param {Integer} position of split begin
     * @param {Integer} position of split
     * @param {Integer} position of split end
     */
    insertSplit: function(section, splitBegin, split, splitEnd) {

    },
    /*
     * Remove all splits from a section
     * @example
     * new AwesomeTableUtils().removeSplits('788ed58bdb03230029344870399619a0'); 
     */
    removeSplits: function(section) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', section);
        gr.orderBy('position');
        gr.query();
        var positions = [];
        while (gr.next()) {
            var pos = gr.position.toString();
            if (gr.type.toString().indexOf('split') > -1) {
                positions.push(pos);
                new AwesomeTableUtils().removeElement(gr.element.toString(), section);
            }
        }
        if (positions.length == 0)
            gs.info('no splits found');
        else
            new AwesomeTableUtils().cleanElementPositions(section);
    },
    /*
     * Remove all splits from a section from a position
     * @example
     * new AwesomeTableUtils().removeSplitAt('788ed58bdb03230029344870399619a0', 2); // remove the split starting from position 2 
     */
    removeSplitAt: function(section, position) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', section);
        gr.orderBy('position');
        gr.query();
        var positions = [];
        var count = 0; // how many split elements have been removed.  we need to remove 3 (splitbegin, split, and splitend)
        while (gr.next()) {
            var pos = gr.position.toString();
            if (gr.type.toString().indexOf('split') > -1 && pos >= position) {
                positions.push(pos);
                if (count < 3)
                    new AwesomeTableUtils().removeElement(gr.element.toString(), section);
                count++;
            }
        }
        if (positions.length == 0)
            gs.info('no splits found');
        else
            new AwesomeTableUtils().cleanElementPositions(section);
    },
    /*
     * Go through all elements in a section and set new position id's.  To clean up when removing elements from the section - example: 0,1,3 becomes 0,1,2.
     * @example
     * new AwesomeTableUtils().cleanElementPositions('788ed58bdb03230029344870399619a0'); 
     */
    cleanElementPositions: function(section) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', section);
        gr.orderBy('position');
        gr.query();
        var index = 0;
        while (gr.next()) {
            gr.setValue('position', index);
            index++;
            gr.update();
        }
    },
    /*
     * Delete all elements and sections in a form (always), and delete the form (optional)
     * @example
     * new AwesomeTableUtils().clearForm('788ed58bdb03230029344870399619a0', false); 
     * @input {String} form sys_id
     * @input {Boolean} true if delete form record, false if not
     * @return {Boolean} true if form record was deleted, false if not.  PS: Elements and sections will always get deleted anyways.
     */
    clearForm: function(form, deleteForm) {
        // first we need to find all sections in this form
        var gr = new GlideRecord('sys_ui_form_section');
        gr.addQuery('sys_ui_form', form);
        gr.query();

        while (gr.next()) {
            // one iteration == one section
            var section = gr.sys_ui_section;
            var sectionGR = new GlideRecord('sys_ui_section');
            sectionGR.addQuery('sys_id', section);
            sectionGR.query();

            while (sectionGR.next()) {
                // now to find all elements in this section, and remove them
                var elementGR = new GlideRecord('sys_ui_element');
                elementGR.addQuery('sys_ui_section', sectionGR.sys_id);
                elementGR.query();
                while (elementGR.next()) {
                    // delete the element from this section
                    elementGR.deleteRecord();
                }
                // all elements are deleted, now to delete the section
                sectionGR.deleteRecord();
            }
            // elements and sections are now deleted.  Now to delete the form section, and form.
            gr.deleteRecord(); // form section (sys_ui_form_section) - this is a connector table record, linking the form and section
        }

        if (deleteForm) {
            // finally delete the form (sys_ui_form) record
            var formGR = new GlideRecord('sys_ui_form');
            formGR.addQuery('sys_id', form);
            formGR.query();
            if (formGR.next())
                formGR.deleteRecord();
            return true;
        }

        return false;

    },

    /*
     * Remove all elements from a Section
     * @example
     * new AwesomeTableUtils().removeAllElements('incident', '788ed58bdb03230029344870399619a0', '788ed58bdb03230029344870399619a0', '788ed58bdb03230029344870399619a0'); 
     * @param {String} sys_id of Section
     */
    removeAllElements: function(table, form, section, deleteSection) {
        var gr = new GlideRecord('sys_ui_element');
        gr.addQuery('sys_ui_section', section);
        gr.setWorkflow(false);
        gr.query();
        var index = 0;
        while (gr.next()) {
            gr.deleteRecord();
        }

        if (deleteSection) {
            new AwesomeTableUtils().removeSection(table, form, section);
        }
        return true;
    },

    /*
     * Adds all elements defined in a json object to a Section
     * @example
     * var json = '[{"element":"name1","position":"2", "type":""},{"element":"name2","position":"1", "type":""}]';
     * // type default should be empty "", other types are .split and so on
     * var section = '788ed58bdb03230029344870399619a0';
     * new AwesomeTableUtils().addElementsJSON(section, json); 
     * @param {String} sys_id of section
     * @param {Array[JSON]} json of elements definitions containing element and position
     */
    addElementsJSON: function(section, json) {
        //json = JSON.parse(json);
        for (var i = 0; i < json.length; i++) {
            var ob = json[i];
            var element = ob.element;
            var position = ob.position;
            var type = ob.type;
            var formatter = ob.formatter;
            new AwesomeTableUtils().addElement(element, position, type, section, formatter);

        }
    },

    /**
     * Modifies choice records
     * @example
     * new AwesomeTableUtils().syncChoice('incident', 'category', 'newValue', 'new', 'en', '1');
     * @param {String} Table name
     * @param {String} Element name
     * @param {String} Value (and Display)
     * @param {String} Action : new, update, delete (lowercase)
     * @param {String} language code ('en')
     * @param {Integer} Sequence
     */
    syncChoice: function(table, element, value, action, language, sequence) {
        // get table from sys_id
        var tableGR = new GlideRecord('sys_db_object');
        tableGR.addQuery('sys_id', table);
        tableGR.query();
        if (tableGR.next())
            table = tableGR.name;

        var gr;
        if (action == 'new') {
            gr = new GlideRecord('sys_choice');
            gr.initialize();
            gr.name = table;
            gr.element = element;
            gr.value = value;
            gr.label = value;
            gr.language = language;
            gr.sequence = sequence;
            gr.insert();
            gs.info('Choice field added for : ' + value);
        } else if (action == 'update') {
            gs.info('update attempt for table ' + table + '  element ' + element);
            gr = new GlideRecord('sys_choice');
            gr.addQuery('name', table);
            gr.addQuery('element', element);
            gr.addQuery('value', value);
            gr.query();
            if (gr.next()) {
                gr.name = table;
                gr.element = element;
                gr.value = value;
                gr.label = value;
                gr.language = language;
                gr.sequence = sequence;
                gr.update();
            } else {
                gs.error('sys_choice not found, nothing updated. element: ' + element);
            }
        } else if (action == 'delete') {
            gs.info('delete attempt for table ' + table + '  element ' + element);
            gr = new GlideRecord('sys_choice');
            gr.addQuery('name', table);
            gr.addQuery('element', element);
            gr.addQuery('value', value);
            gr.query();
            if (gr.next()) {
                gr.deleteRecord();
            } else {
                gs.error('sys_choice not found, nothing deleted. element: ' + element);
            }
        } else {
            throw new Error('No action defined for choice synchronization');
        }
    },

    // Made by Anders Figenschow.  Use this script only in a personal development instance to experiment and learn.
    type: 'AwesomeTableUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-29 09:59:48</sys_created_on>
        <sys_id>c0e2d23f4f323300d69400fe9310c77a</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>AwesomeTableUtils</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="SNCommonLib">9b68c0ccdba8e010bc968278139619a7</sys_scope>
        <sys_update_name>sys_script_include_c0e2d23f4f323300d69400fe9310c77a</sys_update_name>
        <sys_updated_by>m.kirchweger@softpoint.at</sys_updated_by>
        <sys_updated_on>2020-12-07 23:44:42</sys_updated_on>
    </sys_script_include>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="SNCommonLib">9b68c0ccdba8e010bc968278139619a7</claim_owner_scope>
        <claim_timestamp>1763f97d1da0000001</claim_timestamp>
        <metadata_update_name>sys_script_include_c0e2d23f4f323300d69400fe9310c77a</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>SNCommonLib</previous_claim_name>
        <previous_claim_scope>9b68c0ccdba8e010bc968278139619a7</previous_claim_scope>
        <sys_created_by>m.kirchweger@softpoint.at</sys_created_by>
        <sys_created_on>2020-12-07 23:44:42</sys_created_on>
        <sys_id>6a0ee00cdb096410bc96827813961982</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>m.kirchweger@softpoint.at</sys_updated_by>
        <sys_updated_on>2020-12-07 23:44:42</sys_updated_on>
    </sys_claim>
</record_update>
